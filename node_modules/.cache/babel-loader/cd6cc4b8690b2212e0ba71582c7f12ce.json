{"ast":null,"code":"import _classCallCheck from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { Transformers } from '@supabase/realtime-js';\nexport var SupabaseRealtimeClient = /*#__PURE__*/function () {\n  function SupabaseRealtimeClient(socket, headers, schema, tableName) {\n    _classCallCheck(this, SupabaseRealtimeClient);\n\n    var chanParams = {};\n    var topic = tableName === '*' ? \"realtime:\".concat(schema) : \"realtime:\".concat(schema, \":\").concat(tableName);\n    var userToken = headers['Authorization'].split(' ')[1];\n\n    if (userToken) {\n      chanParams['user_token'] = userToken;\n    }\n\n    this.subscription = socket.channel(topic, chanParams);\n  }\n\n  _createClass(SupabaseRealtimeClient, [{\n    key: \"getPayloadRecords\",\n    value: function getPayloadRecords(payload) {\n      var records = {\n        \"new\": {},\n        old: {}\n      };\n\n      if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n        records[\"new\"] = Transformers.convertChangeData(payload.columns, payload.record);\n      }\n\n      if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n        records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n      }\n\n      return records;\n    }\n    /**\n     * The event you want to listen to.\n     *\n     * @param event The event\n     * @param callback A callback function that is called whenever the event occurs.\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var _this = this;\n\n      this.subscription.on(event, function (payload) {\n        var enrichedPayload = {\n          schema: payload.schema,\n          table: payload.table,\n          commit_timestamp: payload.commit_timestamp,\n          eventType: payload.type,\n          \"new\": {},\n          old: {},\n          errors: payload.errors\n        };\n        enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), _this.getPayloadRecords(payload));\n        callback(enrichedPayload);\n      });\n      return this;\n    }\n    /**\n     * Enables the subscription.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      this.subscription.onError(function (e) {\n        return callback('SUBSCRIPTION_ERROR', e);\n      });\n      this.subscription.onClose(function () {\n        return callback('CLOSED');\n      });\n      this.subscription.subscribe().receive('ok', function () {\n        return callback('SUBSCRIBED');\n      }).receive('error', function (e) {\n        return callback('SUBSCRIPTION_ERROR', e);\n      }).receive('timeout', function () {\n        return callback('RETRYING_AFTER_TIMEOUT');\n      });\n      return this.subscription;\n    }\n  }]);\n\n  return SupabaseRealtimeClient;\n}();","map":{"version":3,"mappings":"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","names":["Transformers","SupabaseRealtimeClient","socket","headers","schema","tableName","chanParams","topic","userToken","split","subscription","channel","payload","records","old","type","convertChangeData","columns","record","old_record","event","callback","on","enrichedPayload","table","commit_timestamp","eventType","errors","getPayloadRecords","onError","e","onClose","subscribe","receive"],"sourceRoot":"","sources":["../../../src/lib/SupabaseRealtimeClient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}