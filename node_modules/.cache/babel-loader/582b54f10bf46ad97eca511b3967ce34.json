{"ast":null,"code":"import { defineStore } from 'pinia';\nimport supabase from '../supabase/index';\nexport default defineStore('tasks', {\n  state: () => ({\n    tasks: []\n  }),\n  getters: {\n    onlyCompleted() {\n      return this.tasks.filter(task => task.is_complete);\n    },\n\n    onlyPending() {\n      return this.tasks.filter(task => !task.is_complete);\n    }\n\n  },\n  actions: {\n    async fetchTasks() {\n      const {\n        data: tasks\n      } = await supabase.from('tasks').select('*').order('id', {\n        ascending: false\n      });\n      this.tasks = tasks;\n    },\n\n    async createTask(task) {\n      const {\n        data,\n        error\n      } = await supabase.from('tasks').insert(task);\n      if (error) throw error;else this.tasks.push(data[0]);\n    },\n\n    async deleteTask(id, taskIndex) {\n      const {\n        error\n      } = await supabase.from('tasks').delete().match({\n        id\n      });\n      if (error) throw error;\n      this.tasks.splice(taskIndex, 1);\n    },\n\n    getTaskById(taskId) {\n      return this.tasks.find(task => task.id === parseInt(taskId, 10));\n    }\n\n  }\n});","map":{"version":3,"names":["defineStore","supabase","state","tasks","getters","onlyCompleted","filter","task","is_complete","onlyPending","actions","fetchTasks","data","from","select","order","ascending","createTask","error","insert","push","deleteTask","id","taskIndex","delete","match","splice","getTaskById","taskId","find","parseInt"],"sources":["/Users/maegallego/Desktop/IRONHACK/clonedproject/ToDoApp/to-do-list/src/store/task.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport supabase from '../supabase/index';\n\nexport default defineStore('tasks', {\n  state: () => ({\n    tasks: [],\n  }),\n  getters: {\n    onlyCompleted() {\n      return this.tasks.filter((task) => task.is_complete);\n    },\n    onlyPending() {\n      return this.tasks.filter((task) => !task.is_complete);\n    },\n  },\n  actions: {\n    async fetchTasks() {\n      const { data: tasks } = await supabase\n        .from('tasks')\n        .select('*')\n        .order('id', { ascending: false });\n      this.tasks = tasks;\n    },\n    async createTask(task) {\n      const { data, error } = await supabase\n        .from('tasks')\n        .insert(task);\n      if (error) throw error;\n      else this.tasks.push(data[0]);\n    },\n    async deleteTask(id, taskIndex) {\n      const { error } = await supabase\n        .from('tasks')\n        .delete()\n        .match({ id });\n      if (error) throw error;\n      this.tasks.splice(taskIndex, 1);\n    },\n    getTaskById(taskId) {\n      return this.tasks.find((task) => task.id === parseInt(taskId, 10));\n    },\n  },\n});\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,eAAeD,WAAW,CAAC,OAAD,EAAU;EAClCE,KAAK,EAAE,OAAO;IACZC,KAAK,EAAE;EADK,CAAP,CAD2B;EAIlCC,OAAO,EAAE;IACPC,aAAa,GAAG;MACd,OAAO,KAAKF,KAAL,CAAWG,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACC,WAAjC,CAAP;IACD,CAHM;;IAIPC,WAAW,GAAG;MACZ,OAAO,KAAKN,KAAL,CAAWG,MAAX,CAAmBC,IAAD,IAAU,CAACA,IAAI,CAACC,WAAlC,CAAP;IACD;;EANM,CAJyB;EAYlCE,OAAO,EAAE;IACP,MAAMC,UAAN,GAAmB;MACjB,MAAM;QAAEC,IAAI,EAAET;MAAR,IAAkB,MAAMF,QAAQ,CACnCY,IAD2B,CACtB,OADsB,EAE3BC,MAF2B,CAEpB,GAFoB,EAG3BC,KAH2B,CAGrB,IAHqB,EAGf;QAAEC,SAAS,EAAE;MAAb,CAHe,CAA9B;MAIA,KAAKb,KAAL,GAAaA,KAAb;IACD,CAPM;;IAQP,MAAMc,UAAN,CAAiBV,IAAjB,EAAuB;MACrB,MAAM;QAAEK,IAAF;QAAQM;MAAR,IAAkB,MAAMjB,QAAQ,CACnCY,IAD2B,CACtB,OADsB,EAE3BM,MAF2B,CAEpBZ,IAFoB,CAA9B;MAGA,IAAIW,KAAJ,EAAW,MAAMA,KAAN,CAAX,KACK,KAAKf,KAAL,CAAWiB,IAAX,CAAgBR,IAAI,CAAC,CAAD,CAApB;IACN,CAdM;;IAeP,MAAMS,UAAN,CAAiBC,EAAjB,EAAqBC,SAArB,EAAgC;MAC9B,MAAM;QAAEL;MAAF,IAAY,MAAMjB,QAAQ,CAC7BY,IADqB,CAChB,OADgB,EAErBW,MAFqB,GAGrBC,KAHqB,CAGf;QAAEH;MAAF,CAHe,CAAxB;MAIA,IAAIJ,KAAJ,EAAW,MAAMA,KAAN;MACX,KAAKf,KAAL,CAAWuB,MAAX,CAAkBH,SAAlB,EAA6B,CAA7B;IACD,CAtBM;;IAuBPI,WAAW,CAACC,MAAD,EAAS;MAClB,OAAO,KAAKzB,KAAL,CAAW0B,IAAX,CAAiBtB,IAAD,IAAUA,IAAI,CAACe,EAAL,KAAYQ,QAAQ,CAACF,MAAD,EAAS,EAAT,CAA9C,CAAP;IACD;;EAzBM;AAZyB,CAAV,CAA1B"},"metadata":{},"sourceType":"module"}