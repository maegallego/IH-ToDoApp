{"ast":null,"code":"import { mapState, mapActions } from 'pinia';\nimport userStore from '@/store/user';\nexport default {\n  name: 'AuthView.vue',\n\n  data() {\n    return {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      errorMessage: ''\n    };\n  },\n\n  computed: { ...mapState(userStore, ['user'])\n  },\n  methods: { ...mapActions(userStore, ['signUp']),\n\n    async handleSignUp() {\n      if (this.password !== this.confirmPassword) {\n        this.errorMessage = 'Passwords dont match';\n        return;\n      }\n\n      const userData = {\n        email: this.email,\n        password: this.password\n      };\n\n      try {\n        await this.signUp(userData.email, userData.password);\n      } catch (error) {\n        this.errorMessage = error.message;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAuCA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,eAAe;EACbC,IAAI,EAAE,cADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE,EADF;MAELC,QAAQ,EAAE,EAFL;MAGLC,eAAe,EAAE,EAHZ;MAILC,YAAY,EAAE;IAJT,CAAP;EAMD,CATY;;EAUbC,QAAQ,EAAE,EACR,GAAGT,QAAQ,CAACE,SAAD,EAAY,CAAC,MAAD,CAAZ;EADH,CAVG;EAabQ,OAAO,EAAE,EACP,GAAGT,UAAU,CAACC,SAAD,EAAY,CAAC,QAAD,CAAZ,CADN;;IAEP,MAAMS,YAAN,GAAqB;MACnB,IAAI,KAAKL,QAAL,KAAkB,KAAKC,eAA3B,EAA4C;QAC1C,KAAKC,YAAL,GAAoB,sBAApB;QACA;MACF;;MACA,MAAMI,QAAO,GAAI;QACfP,KAAK,EAAE,KAAKA,KADG;QAEfC,QAAQ,EAAE,KAAKA;MAFA,CAAjB;;MAIA,IAAI;QACF,MAAM,KAAKO,MAAL,CAAYD,QAAQ,CAACP,KAArB,EAA4BO,QAAQ,CAACN,QAArC,CAAN;MACF,CAFA,CAEE,OAAOQ,KAAP,EAAc;QACd,KAAKN,YAAL,GAAoBM,KAAK,CAACC,OAA1B;MACF;IACD;;EAhBM;AAbI,CAAf","names":["mapState","mapActions","userStore","name","data","email","password","confirmPassword","errorMessage","computed","methods","handleSignUp","userData","signUp","error","message"],"sourceRoot":"","sources":["/Users/maegallego/Desktop/IRONHACK/clonedproject/ToDoApp/to-do-list/src/components/SignUp.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>Sign Up</h1>\n        <form class='align-left'  @submit.prevent='handleSignUp'>\n            <div>\n                <label for='email'>Email\n                    <input id='email' class='full-width form-input'\n                    type='email'\n                    placeholder='Email'\n                    v-model='email'\n                    />\n                </label>\n            </div>\n            <div>\n                <label for='password'>Password\n                    <input id='password' class='full-width form-input'\n                    placeholder='Password'\n                    type='password'\n                    v-model='password'\n                    />\n                </label>\n            </div>\n            <div>\n                <label for=\"confirmPassword\">Confirm Password\n                    <input id=\"confirmPassword\" class='full-width form-input'\n                    placeholder='Confirm Password'\n                    type=\"password\"\n                    v-model=\"confirmPassword\" />\n                </label>\n            </div>\n            <button class='transparent-btn bg-purple' @click=\"handleSignUp\">Sign Up</button>\n        </form>\n        <div v-if=\"errorMessage\">\n          {{ errorMessage }}\n        </div>\n    </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'pinia';\nimport userStore from '@/store/user';\n\nexport default {\n  name: 'AuthView.vue',\n  data() {\n    return {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      errorMessage: '',\n    };\n  },\n  computed: {\n    ...mapState(userStore, ['user']),\n  },\n  methods: {\n    ...mapActions(userStore, ['signUp']),\n    async handleSignUp() {\n      if (this.password !== this.confirmPassword) {\n        this.errorMessage = 'Passwords dont match';\n        return;\n      }\n      const userData = {\n        email: this.email,\n        password: this.password,\n      };\n      try {\n        await this.signUp(userData.email, userData.password);\n      } catch (error) {\n        this.errorMessage = error.message;\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}