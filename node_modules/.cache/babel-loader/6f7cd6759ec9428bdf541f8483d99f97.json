{"ast":null,"code":"import _classCallCheck from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { PostgrestBuilder } from './types';\n/**\n * Post-filters (transforms)\n */\n\nvar PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestTransformBuilder, _PostgrestBuilder);\n\n  var _super = _createSuper(PostgrestTransformBuilder);\n\n  function PostgrestTransformBuilder() {\n    _classCallCheck(this, PostgrestTransformBuilder);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PostgrestTransformBuilder, [{\n    key: \"select\",\n    value:\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     */\n    function select() {\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n      // Remove whitespaces except when quoted\n      var quoted = false;\n      var cleanedColumns = columns.split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      return this;\n    }\n    /**\n     * Orders the result with the specified `column`.\n     *\n     * @param column  The column to order on.\n     * @param ascending  If `true`, the result will be in ascending order.\n     * @param nullsFirst  If `true`, `null`s appear first.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n\n  }, {\n    key: \"order\",\n    value: function order(column) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$ascending = _ref.ascending,\n          ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n          _ref$nullsFirst = _ref.nullsFirst,\n          nullsFirst = _ref$nullsFirst === void 0 ? false : _ref$nullsFirst,\n          foreignTable = _ref.foreignTable;\n\n      var key = typeof foreignTable === 'undefined' ? 'order' : \"\".concat(foreignTable, \".order\");\n      var existingOrder = this.url.searchParams.get(key);\n      this.url.searchParams.set(key, \"\".concat(existingOrder ? \"\".concat(existingOrder, \",\") : '').concat(column, \".\").concat(ascending ? 'asc' : 'desc', \".\").concat(nullsFirst ? 'nullsfirst' : 'nullslast'));\n      return this;\n    }\n    /**\n     * Limits the result with the specified `count`.\n     *\n     * @param count  The maximum no. of rows to limit to.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n\n  }, {\n    key: \"limit\",\n    value: function limit(count) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref2.foreignTable;\n\n      var key = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(key, \"\".concat(count));\n      return this;\n    }\n    /**\n     * Limits the result to rows within the specified range, inclusive.\n     *\n     * @param from  The starting index from which to limit the result, inclusive.\n     * @param to  The last index to which to limit the result, inclusive.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n\n  }, {\n    key: \"range\",\n    value: function range(from, to) {\n      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          foreignTable = _ref3.foreignTable;\n\n      var keyOffset = typeof foreignTable === 'undefined' ? 'offset' : \"\".concat(foreignTable, \".offset\");\n      var keyLimit = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(keyOffset, \"\".concat(from)); // Range is inclusive, so add 1\n\n      this.url.searchParams.set(keyLimit, \"\".concat(to - from + 1));\n      return this;\n    }\n    /**\n     * Sets the AbortSignal for the fetch request.\n     */\n\n  }, {\n    key: \"abortSignal\",\n    value: function abortSignal(signal) {\n      this.signal = signal;\n      return this;\n    }\n    /**\n     * Retrieves only one row from the result. Result must be one row (e.g. using\n     * `limit`), otherwise this will result in an error.\n     */\n\n  }, {\n    key: \"single\",\n    value: function single() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      return this;\n    }\n    /**\n     * Retrieves at most one row from the result. Result must be at most one row\n     * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n     * error.\n     */\n\n  }, {\n    key: \"maybeSingle\",\n    value: function maybeSingle() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      this.allowEmpty = true;\n      return this;\n    }\n    /**\n     * Set the response type to CSV.\n     */\n\n  }, {\n    key: \"csv\",\n    value: function csv() {\n      this.headers['Accept'] = 'text/csv';\n      return this;\n    }\n  }]);\n\n  return PostgrestTransformBuilder;\n}(PostgrestBuilder);\n\nexport { PostgrestTransformBuilder as default };","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestTransformBuilder","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","count","from","to","keyOffset","keyLimit","signal","headers","allowEmpty"],"sourceRoot":"","sources":["../../../src/lib/PostgrestTransformBuilder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}