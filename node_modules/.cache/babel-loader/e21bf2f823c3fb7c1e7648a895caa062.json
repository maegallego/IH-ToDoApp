{"ast":null,"code":"import _regeneratorRuntime from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/maegallego/Desktop/IRONHACK/NewRepoTodoapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.parse-int.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport var PostgrestBuilder = /*#__PURE__*/function () {\n  function PostgrestBuilder(builder) {\n    var _this = this;\n\n    _classCallCheck(this, PostgrestBuilder);\n\n    Object.assign(this, builder);\n\n    var _fetch;\n\n    if (builder.fetch) {\n      _fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      _fetch = function _fetch() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _yield$import;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return import('cross-fetch');\n\n                case 2:\n                  _context.next = 4;\n                  return (_yield$import = _context.sent).fetch.apply(_yield$import, args);\n\n                case 4:\n                  return _context.abrupt(\"return\", _context.sent);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      };\n    } else {\n      _fetch = fetch;\n    }\n\n    this.fetch = function () {\n      return _fetch.apply(void 0, arguments);\n    };\n\n    this.shouldThrowOnError = builder.shouldThrowOnError || false;\n    this.allowEmpty = builder.allowEmpty || false;\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  _createClass(PostgrestBuilder, [{\n    key: \"throwOnError\",\n    value: function throwOnError(_throwOnError) {\n      if (_throwOnError === null || _throwOnError === undefined) {\n        _throwOnError = true;\n      }\n\n      this.shouldThrowOnError = _throwOnError;\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this2 = this;\n\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (typeof this.schema === 'undefined') {// skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers['Accept-Profile'] = this.schema;\n      } else {\n        this.headers['Content-Profile'] = this.schema;\n      }\n\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers['Content-Type'] = 'application/json';\n      }\n\n      var res = this.fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then(function (res) {\n        return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _a, _b, _c, _d, error, data, count, status, statusText, isReturnMinimal, text, countHeader, contentRange, body, postgrestResponse;\n\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  error = null;\n                  data = null;\n                  count = null;\n                  status = res.status;\n                  statusText = res.statusText;\n\n                  if (!res.ok) {\n                    _context2.next = 17;\n                    break;\n                  }\n\n                  isReturnMinimal = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.split(',').includes('return=minimal');\n\n                  if (!(this.method !== 'HEAD' && !isReturnMinimal)) {\n                    _context2.next = 12;\n                    break;\n                  }\n\n                  _context2.next = 10;\n                  return res.text();\n\n                case 10:\n                  text = _context2.sent;\n\n                  if (!text) {// discard `text`\n                  } else if (this.headers['Accept'] === 'text/csv') {\n                    data = text;\n                  } else {\n                    data = JSON.parse(text);\n                  }\n\n                case 12:\n                  countHeader = (_b = this.headers['Prefer']) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\n                  contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\n\n                  if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                  }\n\n                  _context2.next = 24;\n                  break;\n\n                case 17:\n                  _context2.next = 19;\n                  return res.text();\n\n                case 19:\n                  body = _context2.sent;\n\n                  try {\n                    error = JSON.parse(body);\n                  } catch (_e) {\n                    error = {\n                      message: body\n                    };\n                  }\n\n                  if (error && this.allowEmpty && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                  }\n\n                  if (!(error && this.shouldThrowOnError)) {\n                    _context2.next = 24;\n                    break;\n                  }\n\n                  throw error;\n\n                case 24:\n                  postgrestResponse = {\n                    error: error,\n                    data: data,\n                    count: count,\n                    status: status,\n                    statusText: statusText,\n                    body: data\n                  };\n                  return _context2.abrupt(\"return\", postgrestResponse);\n\n                case 26:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      });\n\n      if (!this.shouldThrowOnError) {\n        res = res[\"catch\"](function (fetchError) {\n          return {\n            error: {\n              message: \"FetchError: \".concat(fetchError.message),\n              details: '',\n              hint: '',\n              code: fetchError.code || ''\n            },\n            data: null,\n            body: null,\n            count: null,\n            status: 400,\n            statusText: 'Bad Request'\n          };\n        });\n      }\n\n      return res.then(onfulfilled, onrejected);\n    }\n  }]);\n\n  return PostgrestBuilder;\n}();","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","builder","Object","assign","_fetch","fetch","args","__awaiter","shouldThrowOnError","allowEmpty","throwOnError","undefined","onfulfilled","onrejected","schema","includes","method","headers","res","url","toString","body","JSON","stringify","signal","then","error","data","count","status","statusText","ok","isReturnMinimal","_a","split","text","parse","countHeader","_b","match","contentRange","get","_c","length","parseInt","message","details","_d","postgrestResponse","fetchError","hint","code"],"sourceRoot":"","sources":["../../../src/lib/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}